// src/app/api/properties/route.ts
import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { z } from "zod";
import {
  PROPERTY_TYPES,
  PURPOSES,
  STATUSES,
  DIRECTIONS,
  LEGALS,
  valuesOf,
} from "@/constants/bdsOptions";

// B·∫Øt Next kh√¥ng cache tƒ©nh & ƒë·∫£m b·∫£o ch·∫°y Node runtime
export const runtime = "nodejs";
export const dynamic = "force-dynamic";

/**
 * Chu·∫©n ho√° "purpose" n·∫øu client l·ª° g·ª≠i nh√£n ti·∫øng Vi·ªát:
 * "ban"/"b√°n"  -> "buy"
 * "cho-thue"/"cho thu√™"/"thue" -> "rent"
 */
const PurposeEnum = z.enum(valuesOf(PURPOSES));
const PurposeSchema = z.preprocess((v) => {
  if (typeof v === "string") {
    const s = v.trim().toLowerCase();
    if (s === "ban" || s === "b√°n") return "buy";
    if (s === "cho-thue" || s === "cho thu√™" || s === "thue" || s === "thu√™") return "rent";
  }
  return v;
}, PurposeEnum);

/** Th√¥ng s·ªë k·ªπ thu·∫≠t cho BƒêS c√¥ng nghi·ªáp (tu·ª≥ ch·ªçn) */
const SpecsSchema = z
  .object({
    powerKva: z.coerce.number().positive().optional(),       // ƒêi·ªán 3 pha (kVA)
    floorLoad: z.coerce.number().positive().optional(),      // T·∫£i s√†n (t·∫•n/m¬≤)
    clearHeight: z.coerce.number().positive().optional(),    // Cao th√¥ng thu·ª∑ (m)
    dockDoors: z.coerce.number().int().min(0).optional(),    // S·ªë c·ª≠a/dock
    roadWidth: z.coerce.number().positive().optional(),      // L·ªô gi·ªõi (m)
    officeRatio: z.coerce.number().min(0).max(100).optional()// % di·ªán t√≠ch vƒÉn ph√≤ng
  })
  .partial()
  .strict();

const PropertySchema = z.object({
  title: z.string().trim().min(3),
  description: z.string().trim().min(10),
  price: z.coerce.number().positive(),
  area: z.coerce.number().positive(),
  address: z.string().trim().min(3),

  // L∆∞u slug v·ªã tr√≠
  ward: z.string().trim().optional().nullable(),
  district: z.string().trim().optional().nullable(),
  city: z.string().trim().optional().nullable(),

  propertyType: z.enum(valuesOf(PROPERTY_TYPES)),
  purpose: PurposeSchema, // d√πng schema ƒë√£ chu·∫©n ho√° ·ªü tr√™n
  status: z.enum(valuesOf(STATUSES)),

  bedrooms: z.coerce.number().int().optional().nullable(),
  bathrooms: z.coerce.number().int().optional().nullable(),
  floors: z.coerce.number().int().optional().nullable(),

  legal: z.enum(valuesOf(LEGALS)).optional().nullable(),
  direction: z.enum(valuesOf(DIRECTIONS)).optional().nullable(),

  highlights: z.array(z.string()).optional().default([]),
  images: z.array(z.string().url()).min(1),

  userId: z.string().trim().optional().nullable(),
  projectSlug: z.string().trim().optional().nullable(), // slug d·ª± √°n

  // üëá Th√¥ng s·ªë c√¥ng nghi·ªáp (ch·ªâ g·ª≠i khi c·∫ßn)
  specs: SpecsSchema.optional(),
});

// GET: tr·∫£ danh s√°ch property m·ªõi nh·∫•t tr∆∞·ªõc
// GET: tr·∫£ danh s√°ch property m·ªõi nh·∫•t tr∆∞·ªõc, c√≥ th·ªÉ l·ªçc theo ?userId=
export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const userId = searchParams.get("userId") || undefined;

    const properties = await prisma.property.findMany({
      where: userId ? { userId } : undefined,
      orderBy: { postedAt: "desc" },
    });

    return NextResponse.json(properties, { status: 200 });
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch b·∫•t ƒë·ªông s·∫£n:", error);
    return NextResponse.json(
      { error: "Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu" },
      { status: 500 }
    );
  }
}


// POST: t·∫°o property m·ªõi
export async function POST(req: NextRequest) {
  try {
    const raw = await req.json();

    // L·∫•y userId fallback t·ª´ header (n·∫øu client ch∆∞a g·ª≠i trong body)
    const headerUserId = req.headers.get("x-user-id") || undefined;

    // Helper: chuy·ªÉn "" -> undefined cho c√°c field optional
    const emptyToUndef = (v: any) => (v === "" || v === null ? undefined : v);

    // Chu·∫©n ho√° payload tr∆∞·ªõc khi parse
    const merged = {
      ...raw,

      // ∆Øu ti√™n userId t·ª´ body; n·∫øu thi·∫øu th√¨ d√πng header
      userId: raw.userId ?? headerUserId ?? undefined,

      // Chu·∫©n ho√° c√°c optional string/slugs
      ward: emptyToUndef(raw.ward),
      district: emptyToUndef(raw.district),
      city: emptyToUndef(raw.city),
      legal: emptyToUndef(raw.legal),
      direction: emptyToUndef(raw.direction),
      projectSlug: emptyToUndef(raw.projectSlug),

      // C√°c s·ªë optional (client th∆∞·ªùng ƒë√£ Number() r·ªìi, nh∆∞ng ta v·∫´n ch·∫•p nh·∫≠n r·ªóng)
      bedrooms: emptyToUndef(raw.bedrooms),
      bathrooms: emptyToUndef(raw.bathrooms),
      floors: emptyToUndef(raw.floors),

      // Highlights: ƒë·∫£m b·∫£o l√† m·∫£ng string ho·∫∑c ƒë·ªÉ schema x·ª≠ l√Ω default([])
      highlights: Array.isArray(raw.highlights) ? raw.highlights : undefined,

      // N·∫øu client c√≥ g·ª≠i k√®m specs (cho c√¥ng nghi·ªáp) m√† model ch∆∞a c√≥ field n√†y,
      // Zod (object m·∫∑c ƒë·ªãnh strip unknown) s·∫Ω t·ª± lo·∫°i b·ªè ‚Äî kh√¥ng c·∫ßn l√†m g√¨ th√™m.
    };

    // Validate & chu·∫©n ho√° theo schema hi·ªán c√≥
    const data = PropertySchema.parse(merged);

    // T·∫°o b·∫£n ghi
    const created = await prisma.property.create({ data });
    return NextResponse.json(created, { status: 201 });
  } catch (err: any) {
    console.error("Create property error:", err);
    // ZodError: ∆∞u ti√™n tr·∫£ message r√µ r√†ng
    const message =
      err?.issues?.[0]?.message || err?.message || "Invalid payload";
    return NextResponse.json({ error: message }, { status: 400 });
  }
}